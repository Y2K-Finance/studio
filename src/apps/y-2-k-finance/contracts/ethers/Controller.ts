/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from './common';

export declare namespace Controller {
  export type VaultTVLStruct = {
    RISK_claimTVL: PromiseOrValue<BigNumberish>;
    RISK_finalTVL: PromiseOrValue<BigNumberish>;
    INSR_claimTVL: PromiseOrValue<BigNumberish>;
    INSR_finalTVL: PromiseOrValue<BigNumberish>;
  };

  export type VaultTVLStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber] & {
    RISK_claimTVL: BigNumber;
    RISK_finalTVL: BigNumber;
    INSR_claimTVL: BigNumber;
    INSR_finalTVL: BigNumber;
  };
}

export interface ControllerInterface extends utils.Interface {
  functions: {
    'getLatestPrice(address)': FunctionFragment;
    'getVaultFactory()': FunctionFragment;
    'triggerDepeg(uint256,uint256)': FunctionFragment;
    'triggerEndEpoch(uint256,uint256)': FunctionFragment;
    'triggerNullEpoch(uint256,uint256)': FunctionFragment;
    'vaultFactory()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'getLatestPrice'
      | 'getVaultFactory'
      | 'triggerDepeg'
      | 'triggerEndEpoch'
      | 'triggerNullEpoch'
      | 'vaultFactory',
  ): FunctionFragment;

  encodeFunctionData(functionFragment: 'getLatestPrice', values: [PromiseOrValue<string>]): string;
  encodeFunctionData(functionFragment: 'getVaultFactory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'triggerDepeg',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'triggerEndEpoch',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(
    functionFragment: 'triggerNullEpoch',
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
  ): string;
  encodeFunctionData(functionFragment: 'vaultFactory', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'getLatestPrice', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getVaultFactory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'triggerDepeg', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'triggerEndEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'triggerNullEpoch', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaultFactory', data: BytesLike): Result;

  events: {
    'DepegInsurance(bytes32,tuple,bool,uint256,uint256,int256)': EventFragment;
    'NullEpoch(bytes32,tuple,uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DepegInsurance'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NullEpoch'): EventFragment;
}

export interface DepegInsuranceEventObject {
  epochMarketID: string;
  tvl: Controller.VaultTVLStructOutput;
  isDisaster: boolean;
  epoch: BigNumber;
  time: BigNumber;
  depegPrice: BigNumber;
}
export type DepegInsuranceEvent = TypedEvent<
  [string, Controller.VaultTVLStructOutput, boolean, BigNumber, BigNumber, BigNumber],
  DepegInsuranceEventObject
>;

export type DepegInsuranceEventFilter = TypedEventFilter<DepegInsuranceEvent>;

export interface NullEpochEventObject {
  epochMarketID: string;
  tvl: Controller.VaultTVLStructOutput;
  epoch: BigNumber;
  time: BigNumber;
}
export type NullEpochEvent = TypedEvent<
  [string, Controller.VaultTVLStructOutput, BigNumber, BigNumber],
  NullEpochEventObject
>;

export type NullEpochEventFilter = TypedEventFilter<NullEpochEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getLatestPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<[BigNumber] & { nowPrice: BigNumber }>;

    getVaultFactory(overrides?: CallOverrides): Promise<[string]>;

    triggerDepeg(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    triggerEndEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    triggerNullEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>;

    vaultFactory(overrides?: CallOverrides): Promise<[string]>;
  };

  getLatestPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

  getVaultFactory(overrides?: CallOverrides): Promise<string>;

  triggerDepeg(
    marketIndex: PromiseOrValue<BigNumberish>,
    epochEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  triggerEndEpoch(
    marketIndex: PromiseOrValue<BigNumberish>,
    epochEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  triggerNullEpoch(
    marketIndex: PromiseOrValue<BigNumberish>,
    epochEnd: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>;

  vaultFactory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getLatestPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVaultFactory(overrides?: CallOverrides): Promise<string>;

    triggerDepeg(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    triggerEndEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    triggerNullEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>;

    vaultFactory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'DepegInsurance(bytes32,tuple,bool,uint256,uint256,int256)'(
      epochMarketID?: null,
      tvl?: null,
      isDisaster?: null,
      epoch?: null,
      time?: null,
      depegPrice?: null,
    ): DepegInsuranceEventFilter;
    DepegInsurance(
      epochMarketID?: null,
      tvl?: null,
      isDisaster?: null,
      epoch?: null,
      time?: null,
      depegPrice?: null,
    ): DepegInsuranceEventFilter;

    'NullEpoch(bytes32,tuple,uint256,uint256)'(
      epochMarketID?: null,
      tvl?: null,
      epoch?: null,
      time?: null,
    ): NullEpochEventFilter;
    NullEpoch(epochMarketID?: null, tvl?: null, epoch?: null, time?: null): NullEpochEventFilter;
  };

  estimateGas: {
    getLatestPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;

    getVaultFactory(overrides?: CallOverrides): Promise<BigNumber>;

    triggerDepeg(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    triggerEndEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    triggerNullEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>;

    vaultFactory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getLatestPrice(_token: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triggerDepeg(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    triggerEndEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    triggerNullEpoch(
      marketIndex: PromiseOrValue<BigNumberish>,
      epochEnd: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>;

    vaultFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
